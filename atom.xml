<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://fuzzyblog.johnnywww.online</id>
    <title>johnnywww&apos;s fuzzy blog</title>
    <updated>2021-12-03T01:53:01.808Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://fuzzyblog.johnnywww.online"/>
    <link rel="self" href="https://fuzzyblog.johnnywww.online/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://fuzzyblog.johnnywww.online/images/avatar.png</logo>
    <icon>https://fuzzyblog.johnnywww.online/favicon.ico</icon>
    <rights>All rights reserved 2021, johnnywww&apos;s fuzzy blog</rights>
    <entry>
        <title type="html"><![CDATA[自动化接口测试之Postman（一篇搞定）]]></title>
        <id>https://fuzzyblog.johnnywww.online/post/zi-dong-hua-jie-kou-ce-shi-zhi-postmanyi-pian-gao-ding/</id>
        <link href="https://fuzzyblog.johnnywww.online/post/zi-dong-hua-jie-kou-ce-shi-zhi-postmanyi-pian-gao-ding/">
        </link>
        <updated>2021-12-02T09:35:29.000Z</updated>
        <content type="html"><![CDATA[<p><em><strong>Postman 最被低估的功能，自动化接口测试效率简直无敌！</strong></em><br>
该篇文章针对已经掌握 Postman 基本用法的读者，即对接口相关概念有一定了解、已经会使用 Postman 进行模拟请求的操作。<br>
当前环境：</p>
<ul>
<li>Window 7 - 64</li>
<li>Postman 版本（免费版）：Chrome App v5.5.3</li>
</ul>
<p>不同版本页面 UI 和部分功能位置会有点不同，不过影响不大。<br>
我们先思考一下，如果需要达到自动化接口测试的效果，那么我们在基本的模拟请求上还需要做哪些呢？<br>
以下我粗略概括为 3 个问题（欢迎更多补充与建议）：</p>
<ul>
<li>如何判断接口是否请求成功</li>
<li>如何进行接口批量、定期测试</li>
<li>如何处理依赖接口问题（比如商品下单的接口必须要求先登录）<br>
所以，接下来就主要分为 3 个部分进行介绍，以分别解决这 3 个问题。<br>
<strong>接口结果判断</strong><br>
首先，既然是自动化测试，那么我们肯定需要工具 (Postman) 或者代码能帮我们直接判断结果是否符合预期。那么在接口测试上，大体就两个思路：</li>
</ul>
<ul>
<li>判断请求返回的 code 是否符合预期</li>
<li>判断请求返回的内容中是否包含预期的内容（关键字）<br>
接下来我们看看如何利用 Postman 来解决上述的问题：<br>
** 功能区 **<br>
<img src="https://mmbiz.qpic.cn/mmbiz_png/eQPyBffYbufFVD73Mhn3G7uuOQXBddWqicBU4RXkHQfP1dMTNSdb2n57iaiaGqSIdvCK2CMtOvRCtuTpOCRLnOSBA/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="" loading="lazy"><br>
在 Postman 中相关的功能在非常显眼的地方，Tests 功能的使用需要我们有一定的编程语言基础，目前支持的脚本语言即为 JavaScript 。但比较好的一点是，我们不需要再去考虑上下文问题以及运行环境的问题 ，也就是说我们只需要在这边完成结果逻辑判断的代码块即可。</li>
</ul>
<p>而 Postman 还为我们提供了一些常用的代码模板，在 Tests 面板右边的 SNIPPETS 功能区中，所以对 JavaScript 不大了解问题也不大。代码编写相关将在下文进行具体介绍。</p>
<p><strong>脚本相关</strong><br>
先看上图的代码部分，我们可以发现 responseCode 、 responseBody 和 tests 三个变量（可直接使用）：</p>
<ul>
<li>responseCode ：包含请求的返回的状态信息(如：code)</li>
<li>responseBody：为接口请求放回的数据内容（类型为字符串）</li>
<li>tests ：为键值对形式，用于表示我们的测试结果是成功与否，最终展示在 Test Results 中。</li>
</ul>
<ul>
<li>key ：（如：code 200）我们可以用来当做结果的一个描述</li>
<li>value：其值为布尔型，ture 表示测试通过， false 表示测试失败。<br>
所以上述代码应该不难理解了，而有了返回结果的数据以及表示结果成功与否的方式，那么我们“接口结果判断”的问题也就基本解决了。</li>
</ul>
<p>另外还有几个比较常用的：</p>
<ul>
<li>responseTime ：请求所耗时长</li>
<li>postman ：可以做的比较多，比如
<ul>
<li>获取返回数据的头部信息：postman.getResponseHeader(&quot;&quot;)</li>
<li>设置全局变量：postman.setGlobalVariable(&quot;variable_key&quot;, &quot;variable_value&quot;);<br>
<strong>代码模板</strong><br>
Postman 在 SNIPPETS 功能区中为我们提供的代码模板已经能解决大部分情况了，以下先挑几个跟结果判断相关的进行讲解：<br>
Status code : Code is 200</li>
</ul>
</li>
</ul>
<pre><code>//根据返回的 Code 判断请求情况
tests[&quot;Status code is 200&quot;] = responseCode.code === 200;
</code></pre>
<p>Response body: Contains string</p>
<pre><code>//判断返回的内容中是否存在“关键字”。（tests 的 key 可修改，将不再强调）
tests[&quot;Body matches string&quot;] = responseBody.has(&quot;这里可以改为你要判断的关键字内容&quot;);

//如上文提到的：
// 判断结果中是否存在 access_token 关键字
tests[&quot;has access_token&quot;] = responseBody.has(&quot;access_token&quot;);
</code></pre>
<p>Response body: is equal to string</p>
<pre><code>//判断返回内容是否跟预期完全相等。
tests[&quot;Body is correct&quot;] = responseBody === &quot;这里可以改为你的预期内容&quot;;
</code></pre>
<p>Response body: JSON value check</p>
<pre><code>//上文提到，responseBody 为字符串类型，支持转为 Json 格式
var jsonData = JSON.parse(responseBody);
tests[&quot;Your test name&quot;] = jsonData.value === 100;
</code></pre>
<p>Response time is less than 200ms</p>
<pre><code>//判断请求时长是否小于200ms ,具体时长按情况自定义
tests[&quot;Response time is less than 200ms&quot;] = responseTime &lt; 200;
</code></pre>
<p>以上介绍的这些基本已经足够完成对单一接口的测试了，但我们知道如果没有批量、定时任务, 那么这些都将毫无意义，继续…</p>
<ul>
<li>集合(批量)测试<br>
想要进行接口的批量测试、管理，那么我们需要将待测试的接口全部都保存到同一个集合（Collections）中，你可以认为就是保存到同一个文件夹中。先看看 Postman 中的操作步骤：<br>
<img src="https://fuzzyblog.johnnywww.online/post-images/1638495877699.png" alt="" loading="lazy"></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://fuzzyblog.johnnywww.online/post/hello-gridea/</id>
        <link href="https://fuzzyblog.johnnywww.online/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>